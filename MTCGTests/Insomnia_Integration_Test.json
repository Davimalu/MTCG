{"_type":"export","__export_format":4,"__export_date":"2024-12-30T13:30:00.146Z","__export_source":"insomnia.desktop.app:v10.3.0","resources":[{"_id":"req_be5feb1b00ab4c3ba3cdf0738f23c7a6","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734681834569,"created":1733583213346,"url":"http://localhost:10001/users","name":"Create user kienboec","description":"Generated from cURL: curl -i -X POST http://localhost:10001/users --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"kienboec\\\", \\\"Password\\\":\\\"daniel\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"kienboec\", \"Password\":\"daniel\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212076,"isPrivate":false,"pathParameters":[],"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Check Response Message', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('User Created');\n});\n\ninsomnia.test('Ensure User Object Exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User).to.be.an('object');\n});\n\ninsomnia.test('Verify Username is a String', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.Username).to.be.a('string');\n});\n\ninsomnia.test('Check Default Stats', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.Stats).to.eql({\n    Wins: 0,\n    Losses: 0,\n    Ties: 0,\n    EloPoints: 100\n  });\n});\n\ninsomnia.test('Verify Default Biography, DisplayName, and Image Fields', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.DisplayName).to.eql('');\n  insomnia.expect(jsonBody.User.Biography).to.eql('');\n  insomnia.expect(jsonBody.User.Image).to.eql('');\n});\n\n\ninsomnia.test('Verify Default Coin Count', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.CoinCount).to.eql(20);\n});\n\ninsomnia.test('Validate Structure of the Entire User Object', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User).to.have.all.keys(\n    'Username',\n    'DisplayName',\n    'Biography',\n    'Image',\n    'Stats',\n    'CoinCount'\n  );\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_0223b907205c45c0be4c71b7bd725efd","parentId":"wrk_099f18546a14452c9a28c49ce68919f2","modified":1733589802381,"created":1733583213345,"name":"Monster Trading Card Game","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1733583212077,"preRequestScript":"","afterResponseScript":"","authentication":{},"_type":"request_group"},{"_id":"wrk_099f18546a14452c9a28c49ce68919f2","parentId":null,"modified":1733583213343,"created":1733583213343,"name":"Monster Trading Card Game","description":"","scope":"collection","_type":"workspace"},{"_id":"req_2c7a5f80163a473f9a7bb8f70825320e","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734681844332,"created":1733583213347,"url":"http://localhost:10001/users","name":"Create user altenhof","description":"Generated from cURL: curl -i -X POST http://localhost:10001/users --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"altenhof\\\", \\\"Password\\\":\\\"markus\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"altenhof\", \"Password\":\"markus\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212075,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Check Response Message', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('User Created');\n});\n\ninsomnia.test('Ensure User Object Exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User).to.be.an('object');\n});\n\ninsomnia.test('Verify Username is a String', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.Username).to.be.a('string');\n});\n\ninsomnia.test('Check Default Stats', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.Stats).to.eql({\n    Wins: 0,\n    Losses: 0,\n    Ties: 0,\n    EloPoints: 100\n  });\n});\n\ninsomnia.test('Verify Default Biography, DisplayName, and Image Fields', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.DisplayName).to.eql('');\n  insomnia.expect(jsonBody.User.Biography).to.eql('');\n  insomnia.expect(jsonBody.User.Image).to.eql('');\n});\n\n\ninsomnia.test('Verify Default Coin Count', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.CoinCount).to.eql(20);\n});\n\ninsomnia.test('Validate Structure of the Entire User Object', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User).to.have.all.keys(\n    'Username',\n    'DisplayName',\n    'Biography',\n    'Image',\n    'Stats',\n    'CoinCount'\n  );\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2c98ad6f2f0649e5b46222b858460960","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734681852122,"created":1733583213348,"url":"http://localhost:10001/users","name":"Create user admin","description":"Generated from cURL: curl -i -X POST http://localhost:10001/users --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"admin\\\",    \\\"Password\\\":\\\"istrator\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"admin\",    \"Password\":\"istrator\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212074,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Check Response Message', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('User Created');\n});\n\ninsomnia.test('Ensure User Object Exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User).to.be.an('object');\n});\n\ninsomnia.test('Verify Username is a String', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.Username).to.be.a('string');\n});\n\ninsomnia.test('Check Default Stats', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.Stats).to.eql({\n    Wins: 0,\n    Losses: 0,\n    Ties: 0,\n    EloPoints: 100\n  });\n});\n\ninsomnia.test('Verify Default Biography, DisplayName, and Image Fields', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.DisplayName).to.eql('');\n  insomnia.expect(jsonBody.User.Biography).to.eql('');\n  insomnia.expect(jsonBody.User.Image).to.eql('');\n});\n\n\ninsomnia.test('Verify Default Coin Count', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User.CoinCount).to.eql(20);\n});\n\ninsomnia.test('Validate Structure of the Entire User Object', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.User).to.have.all.keys(\n    'Username',\n    'DisplayName',\n    'Biography',\n    'Image',\n    'Stats',\n    'CoinCount'\n  );\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_323ec4c8f86745c0a280e1a988980aa8","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734767966762,"created":1733583213348,"url":"http://localhost:10001/users","name":"Create user kienboec (2nd time)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/users --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"kienboec\\\", \\\"Password\\\":\\\"daniel\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"kienboec\", \"Password\":\"daniel\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_95a217ad08634cef8e782e0224142d81"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212073,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 409', () => {\n  insomnia.expect(insomnia.response.code).to.eql(409);\n});\n\ninsomnia.test('Reponse: \"User already exists\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User already exists\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_26c2dff2652c4106bee273ea19e483ce","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733585311809,"created":1733583213349,"url":"http://localhost:10001/users","name":"Create user kienboec (3rd time, with different password)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/users --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"kienboec\\\", \\\"Password\\\":\\\"different\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"kienboec\", \"Password\":\"different\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212072,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 409', () => {\n  insomnia.expect(insomnia.response.code).to.eql(409);\n});\n\ninsomnia.test('Reponse: \"User already exists\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User already exists\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1b9f2041420f403f9c544c9959279a46","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733585141317,"created":1733583213350,"url":"http://localhost:10001/sessions","name":"Login kienboec","description":"Generated from cURL: curl -i -X POST http://localhost:10001/sessions --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"kienboec\\\", \\\"Password\\\":\\\"daniel\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"kienboec\", \"Password\":\"daniel\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212071,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse includes token', () => {\n\tinsomnia.expect(insomnia.response.json()).to.have.property(\"Token\");\n});\n\ninsomnia.test('Token is correct', () => {\n    const jsonResponse = insomnia.response.json();\n    const token = jsonResponse.Token;\n\n    insomnia.expect(token).to.equal('kienboec-mtcgToken');\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fa19bd17ef54492dbc7c6b26197f570a","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733585157849,"created":1733583213351,"url":"http://localhost:10001/sessions","name":"Login altenhof","description":"Generated from cURL: curl -i -X POST http://localhost:10001/sessions --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"altenhof\\\", \\\"Password\\\":\\\"markus\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"altenhof\", \"Password\":\"markus\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212070,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse includes token', () => {\n\tinsomnia.expect(insomnia.response.json()).to.have.property(\"Token\");\n});\n\ninsomnia.test('Token is correct', () => {\n    const jsonResponse = insomnia.response.json();\n    const token = jsonResponse.Token;\n\n    insomnia.expect(token).to.equal('altenhof-mtcgToken');\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c55dd787da0f484580ba6752c7318518","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733585164971,"created":1733583213351,"url":"http://localhost:10001/sessions","name":"Login admin","description":"Generated from cURL: curl -i -X POST http://localhost:10001/sessions --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"admin\\\",    \\\"Password\\\":\\\"istrator\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"admin\",    \"Password\":\"istrator\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1733583212069,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse includes token', () => {\n\tinsomnia.expect(insomnia.response.json()).to.have.property(\"Token\");\n});\n\ninsomnia.test('Token is correct', () => {\n    const jsonResponse = insomnia.response.json();\n    const token = jsonResponse.Token;\n\n    insomnia.expect(token).to.equal('admin-mtcgToken');\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2fc5471a8e944a3388804f705349540f","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733843601101,"created":1733583213352,"url":"http://localhost:10001/sessions","name":"Login kienboec (wrong password)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/sessions --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"kienboec\\\", \\\"Password\\\":\\\"different\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"kienboec\", \"Password\":\"different\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"none"},"preRequestScript":"","metaSortKey":-1733583212068,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 401', () => {\n  insomnia.expect(insomnia.response.code).to.eql(401);\n});\n\ninsomnia.test('Reponse: \"Wrong username or password\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Wrong username or password\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ac6a96f96d1046d7af6b1571bf16c708","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1735562767993,"created":1735562147687,"url":"http://localhost:10001/sessions","name":"Login david (user nonexistent)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/sessions --header \"Content-Type: application/json\" -d \"{\\\"Username\\\":\\\"kienboec\\\", \\\"Password\\\":\\\"different\\\"}\"","method":"POST","body":{"mimeType":"application/json","text":"{\"Username\":\"david\", \"Password\":\"David123\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"none"},"preRequestScript":"","metaSortKey":-1733583212067.5,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 401', () => {\n  insomnia.expect(insomnia.response.code).to.eql(401);\n});\n\ninsomnia.test('Reponse: \"Wrong username or password\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Wrong username or password\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9dd880182c884bc7ad68d91ee9f627e3","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698643644,"created":1733583213353,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"845f0dc7-37d0-426e-994e-43fc3ac83c08\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 10.0}, {\\\"Id\\\":\\\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 50.0}, {\\\"Id\\\":\\\"e85e3976-7c86-4d06-9a80-641c2019a79f\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 20.0}, {\\\"Id\\\":\\\"1cb6ab86-bdb2-47e5-b6e4-68c5ab389334\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 45.0}, {\\\"Id\\\":\\\"dfdd758f-649c-40f9-ba3a-8657f4b3439f\\\", \\\"Name\\\":\\\"FireSpell\\\",    \\\"Damage\\\": 25.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"845f0dc7-37d0-426e-994e-43fc3ac83c08\", \"Name\":\"WaterGoblin\", \"Damage\": 10.0}, {\"Id\":\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\", \"Name\":\"Dragon\", \"Damage\": 50.0}, {\"Id\":\"e85e3976-7c86-4d06-9a80-641c2019a79f\", \"Name\":\"WaterSpell\", \"Damage\": 20.0}, {\"Id\":\"1cb6ab86-bdb2-47e5-b6e4-68c5ab389334\", \"Name\":\"Ork\", \"Damage\": 45.0}, {\"Id\":\"dfdd758f-649c-40f9-ba3a-8657f4b3439f\", \"Name\":\"FireSpell\",    \"Damage\": 25.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212067,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [\n    { \"Id\": \"845f0dc7-37d0-426e-994e-43fc3ac83c08\", \"Name\": \"WaterGoblin\", \"Damage\": 10.0 },\n    { \"Id\": \"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\", \"Name\": \"Dragon\", \"Damage\": 50.0 },\n    { \"Id\": \"e85e3976-7c86-4d06-9a80-641c2019a79f\", \"Name\": \"WaterSpell\", \"Damage\": 20.0 },\n    { \"Id\": \"1cb6ab86-bdb2-47e5-b6e4-68c5ab389334\", \"Name\": \"Ork\", \"Damage\": 45.0 },\n    { \"Id\": \"dfdd758f-649c-40f9-ba3a-8657f4b3439f\", \"Name\": \"FireSpell\", \"Damage\": 25.0 }\n  ];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_caa49d47f98d48de9cacf0560ec2efd0","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1735563505975,"created":1735562817000,"url":"http://localhost:10001/packages","name":"Add same package again","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"845f0dc7-37d0-426e-994e-43fc3ac83c08\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 10.0}, {\\\"Id\\\":\\\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 50.0}, {\\\"Id\\\":\\\"e85e3976-7c86-4d06-9a80-641c2019a79f\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 20.0}, {\\\"Id\\\":\\\"1cb6ab86-bdb2-47e5-b6e4-68c5ab389334\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 45.0}, {\\\"Id\\\":\\\"dfdd758f-649c-40f9-ba3a-8657f4b3439f\\\", \\\"Name\\\":\\\"FireSpell\\\",    \\\"Damage\\\": 25.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"845f0dc7-37d0-426e-994e-43fc3ac83c08\", \"Name\":\"WaterGoblin\", \"Damage\": 10.0}, {\"Id\":\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\", \"Name\":\"Dragon\", \"Damage\": 50.0}, {\"Id\":\"e85e3976-7c86-4d06-9a80-641c2019a79f\", \"Name\":\"WaterSpell\", \"Damage\": 20.0}, {\"Id\":\"1cb6ab86-bdb2-47e5-b6e4-68c5ab389334\", \"Name\":\"Ork\", \"Damage\": 45.0}, {\"Id\":\"dfdd758f-649c-40f9-ba3a-8657f4b3439f\", \"Name\":\"FireSpell\",    \"Damage\": 25.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212066.5,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 400', () => {\n  insomnia.expect(insomnia.response.code).to.eql(400);\n});\n\ninsomnia.test('Reponse: \"Package already exists\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Package already exists\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_69b79a351e324989a403ce59acafaaa3","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698705750,"created":1733583213354,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"644808c2-f87a-4600-b313-122b02322fd5\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\":  9.0}, {\\\"Id\\\":\\\"4a2757d6-b1c3-47ac-b9a3-91deab093531\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 55.0}, {\\\"Id\\\":\\\"91a6471b-1426-43f6-ad65-6fc473e16f9f\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 21.0}, {\\\"Id\\\":\\\"4ec8b269-0dfa-4f97-809a-2c63fe2a0025\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 55.0}, {\\\"Id\\\":\\\"f8043c23-1534-4487-b66b-238e0c3c39b5\\\", \\\"Name\\\":\\\"WaterSpell\\\",   \\\"Damage\\\": 23.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"644808c2-f87a-4600-b313-122b02322fd5\", \"Name\":\"WaterGoblin\", \"Damage\":  9.0}, {\"Id\":\"4a2757d6-b1c3-47ac-b9a3-91deab093531\", \"Name\":\"Dragon\", \"Damage\": 55.0}, {\"Id\":\"91a6471b-1426-43f6-ad65-6fc473e16f9f\", \"Name\":\"WaterSpell\", \"Damage\": 21.0}, {\"Id\":\"4ec8b269-0dfa-4f97-809a-2c63fe2a0025\", \"Name\":\"Ork\", \"Damage\": 55.0}, {\"Id\":\"f8043c23-1534-4487-b66b-238e0c3c39b5\", \"Name\":\"WaterSpell\",   \"Damage\": 23.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212066,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"644808c2-f87a-4600-b313-122b02322fd5\", \"Name\":\"WaterGoblin\", \"Damage\":  9.0}, {\"Id\":\"4a2757d6-b1c3-47ac-b9a3-91deab093531\", \"Name\":\"Dragon\", \"Damage\": 55.0}, {\"Id\":\"91a6471b-1426-43f6-ad65-6fc473e16f9f\", \"Name\":\"WaterSpell\", \"Damage\": 21.0}, {\"Id\":\"4ec8b269-0dfa-4f97-809a-2c63fe2a0025\", \"Name\":\"Ork\", \"Damage\": 55.0}, {\"Id\":\"f8043c23-1534-4487-b66b-238e0c3c39b5\", \"Name\":\"WaterSpell\",   \"Damage\": 23.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f7e67f48990c470a85176b9c64cc3542","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698711792,"created":1733583213354,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"b017ee50-1c14-44e2-bfd6-2c0c5653a37c\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 11.0}, {\\\"Id\\\":\\\"d04b736a-e874-4137-b191-638e0ff3b4e7\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 70.0}, {\\\"Id\\\":\\\"88221cfe-1f84-41b9-8152-8e36c6a354de\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 22.0}, {\\\"Id\\\":\\\"1d3f175b-c067-4359-989d-96562bfa382c\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 40.0}, {\\\"Id\\\":\\\"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\\\", \\\"Name\\\":\\\"RegularSpell\\\", \\\"Damage\\\": 28.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"b017ee50-1c14-44e2-bfd6-2c0c5653a37c\", \"Name\":\"WaterGoblin\", \"Damage\": 11.0}, {\"Id\":\"d04b736a-e874-4137-b191-638e0ff3b4e7\", \"Name\":\"Dragon\", \"Damage\": 70.0}, {\"Id\":\"88221cfe-1f84-41b9-8152-8e36c6a354de\", \"Name\":\"WaterSpell\", \"Damage\": 22.0}, {\"Id\":\"1d3f175b-c067-4359-989d-96562bfa382c\", \"Name\":\"Ork\", \"Damage\": 40.0}, {\"Id\":\"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\", \"Name\":\"RegularSpell\", \"Damage\": 28.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212065,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"b017ee50-1c14-44e2-bfd6-2c0c5653a37c\", \"Name\":\"WaterGoblin\", \"Damage\": 11.0}, {\"Id\":\"d04b736a-e874-4137-b191-638e0ff3b4e7\", \"Name\":\"Dragon\", \"Damage\": 70.0}, {\"Id\":\"88221cfe-1f84-41b9-8152-8e36c6a354de\", \"Name\":\"WaterSpell\", \"Damage\": 22.0}, {\"Id\":\"1d3f175b-c067-4359-989d-96562bfa382c\", \"Name\":\"Ork\", \"Damage\": 40.0}, {\"Id\":\"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\", \"Name\":\"RegularSpell\", \"Damage\": 28.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8833a241800847378d8910a9dc583c02","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1735565018312,"created":1735563603554,"url":"http://localhost:10001/packages","name":"Add new package (contains some already added cards)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"b017ee50-1c14-44e2-bfd6-2c0c5653a37c\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 11.0}, {\\\"Id\\\":\\\"d04b736a-e874-4137-b191-638e0ff3b4e7\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 70.0}, {\\\"Id\\\":\\\"88221cfe-1f84-41b9-8152-8e36c6a354de\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 22.0}, {\\\"Id\\\":\\\"1d3f175b-c067-4359-989d-96562bfa382c\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 40.0}, {\\\"Id\\\":\\\"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\\\", \\\"Name\\\":\\\"RegularSpell\\\", \\\"Damage\\\": 28.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[\n    {\"Id\": \"b017ee50-1c14-44e2-bfd6-2c0c5653a37c\", \"Name\": \"WaterGoblin\", \"Damage\": 11.0},\n    {\"Id\": \"e7f2a8c3-6c5b-478a-bc12-8f4b9c8e2d9e\", \"Name\": \"FireDragon\", \"Damage\": 75.0},\n    {\"Id\": \"88221cfe-1f84-41b9-8152-8e36c6a354de\", \"Name\": \"WaterSpell\", \"Damage\": 22.0},\n    {\"Id\": \"a412f7d6-7e33-4a89-a1c3-fc9a28d9b5cd\", \"Name\": \"Ork\", \"Damage\": 45.0},\n    {\"Id\": \"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\", \"Name\": \"RegularSpell\", \"Damage\": 28.0}\n]\n"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212064.5,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 500', () => {\n  insomnia.expect(insomnia.response.code).to.eql(500);\n});\n\ninsomnia.test('Reponse: \"Error writing cards to database\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Error writing cards to database\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_972bebaab2874499baef86417a0a3a83","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698718976,"created":1733583213355,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"ed1dc1bc-f0aa-4a0c-8d43-1402189b33c8\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 10.0}, {\\\"Id\\\":\\\"65ff5f23-1e70-4b79-b3bd-f6eb679dd3b5\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 50.0}, {\\\"Id\\\":\\\"55ef46c4-016c-4168-bc43-6b9b1e86414f\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 20.0}, {\\\"Id\\\":\\\"f3fad0f2-a1af-45df-b80d-2e48825773d9\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 45.0}, {\\\"Id\\\":\\\"8c20639d-6400-4534-bd0f-ae563f11f57a\\\", \\\"Name\\\":\\\"WaterSpell\\\",   \\\"Damage\\\": 25.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"ed1dc1bc-f0aa-4a0c-8d43-1402189b33c8\", \"Name\":\"WaterGoblin\", \"Damage\": 10.0}, {\"Id\":\"65ff5f23-1e70-4b79-b3bd-f6eb679dd3b5\", \"Name\":\"Dragon\", \"Damage\": 50.0}, {\"Id\":\"55ef46c4-016c-4168-bc43-6b9b1e86414f\", \"Name\":\"WaterSpell\", \"Damage\": 20.0}, {\"Id\":\"f3fad0f2-a1af-45df-b80d-2e48825773d9\", \"Name\":\"Ork\", \"Damage\": 45.0}, {\"Id\":\"8c20639d-6400-4534-bd0f-ae563f11f57a\", \"Name\":\"WaterSpell\",   \"Damage\": 25.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212064,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"ed1dc1bc-f0aa-4a0c-8d43-1402189b33c8\", \"Name\":\"WaterGoblin\", \"Damage\": 10.0}, {\"Id\":\"65ff5f23-1e70-4b79-b3bd-f6eb679dd3b5\", \"Name\":\"Dragon\", \"Damage\": 50.0}, {\"Id\":\"55ef46c4-016c-4168-bc43-6b9b1e86414f\", \"Name\":\"WaterSpell\", \"Damage\": 20.0}, {\"Id\":\"f3fad0f2-a1af-45df-b80d-2e48825773d9\", \"Name\":\"Ork\", \"Damage\": 45.0}, {\"Id\":\"8c20639d-6400-4534-bd0f-ae563f11f57a\", \"Name\":\"WaterSpell\",   \"Damage\": 25.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1a1fa0b6d2cd409db38ec982f83fab96","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698725487,"created":1733583213356,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"d7d0cb94-2cbf-4f97-8ccf-9933dc5354b8\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\":  9.0}, {\\\"Id\\\":\\\"44c82fbc-ef6d-44ab-8c7a-9fb19a0e7c6e\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 55.0}, {\\\"Id\\\":\\\"2c98cd06-518b-464c-b911-8d787216cddd\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 21.0}, {\\\"Id\\\":\\\"951e886a-0fbf-425d-8df5-af2ee4830d85\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 55.0}, {\\\"Id\\\":\\\"dcd93250-25a7-4dca-85da-cad2789f7198\\\", \\\"Name\\\":\\\"FireSpell\\\",    \\\"Damage\\\": 23.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"d7d0cb94-2cbf-4f97-8ccf-9933dc5354b8\", \"Name\":\"WaterGoblin\", \"Damage\":  9.0}, {\"Id\":\"44c82fbc-ef6d-44ab-8c7a-9fb19a0e7c6e\", \"Name\":\"Dragon\", \"Damage\": 55.0}, {\"Id\":\"2c98cd06-518b-464c-b911-8d787216cddd\", \"Name\":\"WaterSpell\", \"Damage\": 21.0}, {\"Id\":\"951e886a-0fbf-425d-8df5-af2ee4830d85\", \"Name\":\"Ork\", \"Damage\": 55.0}, {\"Id\":\"dcd93250-25a7-4dca-85da-cad2789f7198\", \"Name\":\"FireSpell\",    \"Damage\": 23.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212063,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"d7d0cb94-2cbf-4f97-8ccf-9933dc5354b8\", \"Name\":\"WaterGoblin\", \"Damage\":  9.0}, {\"Id\":\"44c82fbc-ef6d-44ab-8c7a-9fb19a0e7c6e\", \"Name\":\"Dragon\", \"Damage\": 55.0}, {\"Id\":\"2c98cd06-518b-464c-b911-8d787216cddd\", \"Name\":\"WaterSpell\", \"Damage\": 21.0}, {\"Id\":\"951e886a-0fbf-425d-8df5-af2ee4830d85\", \"Name\":\"Ork\", \"Damage\": 55.0}, {\"Id\":\"dcd93250-25a7-4dca-85da-cad2789f7198\", \"Name\":\"FireSpell\",    \"Damage\": 23.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b5ac447c9c874592b4c2b9b4d4dc6a7f","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698731425,"created":1733583213357,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"b2237eca-0271-43bd-87f6-b22f70d42ca4\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 11.0}, {\\\"Id\\\":\\\"9e8238a4-8a7a-487f-9f7d-a8c97899eb48\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 70.0}, {\\\"Id\\\":\\\"d60e23cf-2238-4d49-844f-c7589ee5342e\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 22.0}, {\\\"Id\\\":\\\"fc305a7a-36f7-4d30-ad27-462ca0445649\\\", \\\"Name\\\":\\\"Ork\\\", \\\"Damage\\\": 40.0}, {\\\"Id\\\":\\\"84d276ee-21ec-4171-a509-c1b88162831c\\\", \\\"Name\\\":\\\"RegularSpell\\\", \\\"Damage\\\": 28.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"b2237eca-0271-43bd-87f6-b22f70d42ca4\", \"Name\":\"WaterGoblin\", \"Damage\": 11.0}, {\"Id\":\"9e8238a4-8a7a-487f-9f7d-a8c97899eb48\", \"Name\":\"Dragon\", \"Damage\": 70.0}, {\"Id\":\"d60e23cf-2238-4d49-844f-c7589ee5342e\", \"Name\":\"WaterSpell\", \"Damage\": 22.0}, {\"Id\":\"fc305a7a-36f7-4d30-ad27-462ca0445649\", \"Name\":\"Ork\", \"Damage\": 40.0}, {\"Id\":\"84d276ee-21ec-4171-a509-c1b88162831c\", \"Name\":\"RegularSpell\", \"Damage\": 28.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212062,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"b2237eca-0271-43bd-87f6-b22f70d42ca4\", \"Name\":\"WaterGoblin\", \"Damage\": 11.0}, {\"Id\":\"9e8238a4-8a7a-487f-9f7d-a8c97899eb48\", \"Name\":\"Dragon\", \"Damage\": 70.0}, {\"Id\":\"d60e23cf-2238-4d49-844f-c7589ee5342e\", \"Name\":\"WaterSpell\", \"Damage\": 22.0}, {\"Id\":\"fc305a7a-36f7-4d30-ad27-462ca0445649\", \"Name\":\"Ork\", \"Damage\": 40.0}, {\"Id\":\"84d276ee-21ec-4171-a509-c1b88162831c\", \"Name\":\"RegularSpell\", \"Damage\": 28.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1eb549c93cc34cd089ca0384e299313b","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734683985211,"created":1733583213358,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as kienboec","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212061,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7d012859349d41d490746428051cb157","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734683992456,"created":1733583213358,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as kienboec","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212060,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_50d4e56ba8cf434b893572f9d6962509","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734683993777,"created":1733583213359,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as kienboec","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212059,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_01bdebaafca84461affbf8a664f32c1e","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734683995247,"created":1733583213360,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as kienboec","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212058,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1fc6218efe604ade8783ecdab0ae4af9","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733585405946,"created":1733583213360,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as kienboec (5th time)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212057,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 402', () => {\n  insomnia.expect(insomnia.response.code).to.eql(402);\n});\n\ninsomnia.test('Reponse: \"Not enough money\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Not enough money\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ef0df800bb6b439eaa2ed502bf41290b","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734683998871,"created":1733583213361,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as altenhof","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212056,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a5ea7002e540441884a669ea6d9c70ad","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734684000970,"created":1733583213362,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as altenhof","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212055,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_87524f7d0ccc4b90a69bea86358aaee2","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733585453145,"created":1733583213362,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as altenhof (3rd time)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212054,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 410', () => {\n  insomnia.expect(insomnia.response.code).to.eql(410);\n});\n\ninsomnia.test('Reponse: \"No packages available\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"No packages available\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e1a1dc44bd1849e19755c90ebed373e6","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698744716,"created":1733583213363,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"67f9048f-99b8-4ae4-b866-d8008d00c53d\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 10.0}, {\\\"Id\\\":\\\"aa9999a0-734c-49c6-8f4a-651864b14e62\\\", \\\"Name\\\":\\\"RegularSpell\\\", \\\"Damage\\\": 50.0}, {\\\"Id\\\":\\\"d6e9c720-9b5a-40c7-a6b2-bc34752e3463\\\", \\\"Name\\\":\\\"Knight\\\", \\\"Damage\\\": 20.0}, {\\\"Id\\\":\\\"02a9c76e-b17d-427f-9240-2dd49b0d3bfd\\\", \\\"Name\\\":\\\"RegularSpell\\\", \\\"Damage\\\": 45.0}, {\\\"Id\\\":\\\"2508bf5c-20d7-43b4-8c77-bc677decadef\\\", \\\"Name\\\":\\\"FireElf\\\", \\\"Damage\\\": 25.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"67f9048f-99b8-4ae4-b866-d8008d00c53d\", \"Name\":\"WaterGoblin\", \"Damage\": 10.0}, {\"Id\":\"aa9999a0-734c-49c6-8f4a-651864b14e62\", \"Name\":\"RegularSpell\", \"Damage\": 50.0}, {\"Id\":\"d6e9c720-9b5a-40c7-a6b2-bc34752e3463\", \"Name\":\"Knight\", \"Damage\": 20.0}, {\"Id\":\"02a9c76e-b17d-427f-9240-2dd49b0d3bfd\", \"Name\":\"RegularSpell\", \"Damage\": 45.0}, {\"Id\":\"2508bf5c-20d7-43b4-8c77-bc677decadef\", \"Name\":\"FireElf\", \"Damage\": 25.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212053,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"67f9048f-99b8-4ae4-b866-d8008d00c53d\", \"Name\":\"WaterGoblin\", \"Damage\": 10.0}, {\"Id\":\"aa9999a0-734c-49c6-8f4a-651864b14e62\", \"Name\":\"RegularSpell\", \"Damage\": 50.0}, {\"Id\":\"d6e9c720-9b5a-40c7-a6b2-bc34752e3463\", \"Name\":\"Knight\", \"Damage\": 20.0}, {\"Id\":\"02a9c76e-b17d-427f-9240-2dd49b0d3bfd\", \"Name\":\"RegularSpell\", \"Damage\": 45.0}, {\"Id\":\"2508bf5c-20d7-43b4-8c77-bc677decadef\", \"Name\":\"FireElf\", \"Damage\": 25.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_30eaedc13b3b42759f3c7910e16b9f06","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698751093,"created":1733583213364,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"70962948-2bf7-44a9-9ded-8c68eeac7793\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\":  9.0}, {\\\"Id\\\":\\\"74635fae-8ad3-4295-9139-320ab89c2844\\\", \\\"Name\\\":\\\"FireSpell\\\", \\\"Damage\\\": 55.0}, {\\\"Id\\\":\\\"ce6bcaee-47e1-4011-a49e-5a4d7d4245f3\\\", \\\"Name\\\":\\\"Knight\\\", \\\"Damage\\\": 21.0}, {\\\"Id\\\":\\\"a6fde738-c65a-4b10-b400-6fef0fdb28ba\\\", \\\"Name\\\":\\\"FireSpell\\\", \\\"Damage\\\": 55.0}, {\\\"Id\\\":\\\"a1618f1e-4f4c-4e09-9647-87e16f1edd2d\\\", \\\"Name\\\":\\\"FireElf\\\", \\\"Damage\\\": 23.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"70962948-2bf7-44a9-9ded-8c68eeac7793\", \"Name\":\"WaterGoblin\", \"Damage\":  9.0}, {\"Id\":\"74635fae-8ad3-4295-9139-320ab89c2844\", \"Name\":\"FireSpell\", \"Damage\": 55.0}, {\"Id\":\"ce6bcaee-47e1-4011-a49e-5a4d7d4245f3\", \"Name\":\"Knight\", \"Damage\": 21.0}, {\"Id\":\"a6fde738-c65a-4b10-b400-6fef0fdb28ba\", \"Name\":\"FireSpell\", \"Damage\": 55.0}, {\"Id\":\"a1618f1e-4f4c-4e09-9647-87e16f1edd2d\", \"Name\":\"FireElf\", \"Damage\": 23.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212052,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"70962948-2bf7-44a9-9ded-8c68eeac7793\", \"Name\":\"WaterGoblin\", \"Damage\":  9.0}, {\"Id\":\"74635fae-8ad3-4295-9139-320ab89c2844\", \"Name\":\"FireSpell\", \"Damage\": 55.0}, {\"Id\":\"ce6bcaee-47e1-4011-a49e-5a4d7d4245f3\", \"Name\":\"Knight\", \"Damage\": 21.0}, {\"Id\":\"a6fde738-c65a-4b10-b400-6fef0fdb28ba\", \"Name\":\"FireSpell\", \"Damage\": 55.0}, {\"Id\":\"a1618f1e-4f4c-4e09-9647-87e16f1edd2d\", \"Name\":\"FireElf\", \"Damage\": 23.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2e36d832dfac4b87bc205a3deb1584a2","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734698757837,"created":1733583213364,"url":"http://localhost:10001/packages","name":"Add new package","description":"Generated from cURL: curl -i -X POST http://localhost:10001/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer admin-mtcgToken\" -d \"[{\\\"Id\\\":\\\"2272ba48-6662-404d-a9a1-41a9bed316d9\\\", \\\"Name\\\":\\\"WaterGoblin\\\", \\\"Damage\\\": 11.0}, {\\\"Id\\\":\\\"3871d45b-b630-4a0d-8bc6-a5fc56b6a043\\\", \\\"Name\\\":\\\"Dragon\\\", \\\"Damage\\\": 70.0}, {\\\"Id\\\":\\\"166c1fd5-4dcb-41a8-91cb-f45dcd57cef3\\\", \\\"Name\\\":\\\"Knight\\\", \\\"Damage\\\": 22.0}, {\\\"Id\\\":\\\"237dbaef-49e3-4c23-b64b-abf5c087b276\\\", \\\"Name\\\":\\\"WaterSpell\\\", \\\"Damage\\\": 40.0}, {\\\"Id\\\":\\\"27051a20-8580-43ff-a473-e986b52f297a\\\", \\\"Name\\\":\\\"FireElf\\\", \\\"Damage\\\": 28.0}]\"","method":"POST","body":{"mimeType":"application/json","text":"[{\"Id\":\"2272ba48-6662-404d-a9a1-41a9bed316d9\", \"Name\":\"WaterGoblin\", \"Damage\": 11.0}, {\"Id\":\"3871d45b-b630-4a0d-8bc6-a5fc56b6a043\", \"Name\":\"Dragon\", \"Damage\": 70.0}, {\"Id\":\"166c1fd5-4dcb-41a8-91cb-f45dcd57cef3\", \"Name\":\"Knight\", \"Damage\": 22.0}, {\"Id\":\"237dbaef-49e3-4c23-b64b-abf5c087b276\", \"Name\":\"WaterSpell\", \"Damage\": 40.0}, {\"Id\":\"27051a20-8580-43ff-a473-e986b52f297a\", \"Name\":\"FireElf\", \"Damage\": 28.0}]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer admin-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"admin-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212051,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package created successfully\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package created successfully');\n});\n\ninsomnia.test('Check if AddedCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AddedCards');\n  insomnia.expect(jsonBody.AddedCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AddedCards array contains 5 items', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  insomnia.expect(addedCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const addedCards = insomnia.response.json().AddedCards;\n  addedCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate AddedCards details match request body', () => {\n  const requestBody = [{\"Id\":\"2272ba48-6662-404d-a9a1-41a9bed316d9\", \"Name\":\"WaterGoblin\", \"Damage\": 11.0}, {\"Id\":\"3871d45b-b630-4a0d-8bc6-a5fc56b6a043\", \"Name\":\"Dragon\", \"Damage\": 70.0}, {\"Id\":\"166c1fd5-4dcb-41a8-91cb-f45dcd57cef3\", \"Name\":\"Knight\", \"Damage\": 22.0}, {\"Id\":\"237dbaef-49e3-4c23-b64b-abf5c087b276\", \"Name\":\"WaterSpell\", \"Damage\": 40.0}, {\"Id\":\"27051a20-8580-43ff-a473-e986b52f297a\", \"Name\":\"FireElf\", \"Damage\": 28.0}];\n\n  // Map to convert Name to ElementType\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0,\n    Default: 2\n  };\n\n  // Function to determine ElementType based on Name\n  const getElementType = name => {\n    if (name.includes(\"Water\")) return elementTypeMap.Water;\n    if (name.includes(\"Fire\")) return elementTypeMap.Fire;\n    return elementTypeMap.Default;\n  };\n\n  const addedCards = insomnia.response.json().AddedCards;\n\n  addedCards.forEach((card, index) => {\n    const expectedCard = requestBody[index];\n    const expectedElementType = getElementType(expectedCard.Name);\n\n    insomnia.expect(card.Id).to.eql(expectedCard.Id);\n    insomnia.expect(card.Name).to.eql(expectedCard.Name);\n    insomnia.expect(card.Damage).to.eql(expectedCard.Damage);\n    insomnia.expect(card.ElementType).to.eql(expectedElementType);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b4babce53d94462ea9f7e4f91f2d4e91","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734684006517,"created":1733583213365,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as altenhof","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212050,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7f8361f237784eddb13d681cac64be96","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734684008280,"created":1733583213366,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as altenhof","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212049,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Reponse: \"Package acquired\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Package acquired');\n});\n\ninsomnia.test('Check if AcquiredCards array exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('AcquiredCards');\n  insomnia.expect(jsonBody.AcquiredCards).to.be.an('array');\n});\n\ninsomnia.test('Check if AcquiredCards array contains 5 items', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  insomnia.expect(acquiredCards).to.have.lengthOf(5);\n});\n\ninsomnia.test('Validate structure of each card', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate card Damage and ElementType values', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  acquiredCards.forEach(card => {\n    insomnia.expect(card.Damage).to.be.above(0); // Damage must be positive\n    insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n  });\n});\n\ninsomnia.test('Check if all card IDs are unique', () => {\n  const acquiredCards = insomnia.response.json().AcquiredCards;\n  const ids = acquiredCards.map(card => card.Id);\n  const uniqueIds = new Set(ids);\n  insomnia.expect(uniqueIds.size).to.eql(acquiredCards.length);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_006542a37fe74382b2e7a4b954e5f847","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733585509163,"created":1733583213366,"url":"http://localhost:10001/transactions/packages","name":"Acquire package as altenhof (5th successful time)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/transactions/packages --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212048,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 402', () => {\n  insomnia.expect(insomnia.response.code).to.eql(402);\n});\n\ninsomnia.test('Reponse: \"Not enough money\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Not enough money\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_36987a53045a4a02aa0f5c4e32e2d163","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733825465029,"created":1733583213367,"url":"http://localhost:10001/cards","name":"show all acquired cards kienboec","description":"Generated from cURL: curl -i -X GET http://localhost:10001/cards --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212047,"isPrivate":false,"afterResponseScript":"// Parse the response\nlet response = insomnia.response.json();\n\n// Extract card IDs\nlet cardIds = response.Cards.map(card => card.Id);\n\n// Shuffle the array to get random IDs\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\nshuffle(cardIds);\n\n// Select the first 4 IDs\nlet selectedIds = cardIds.slice(0, 4);\n\n// Save the selected IDs as a stringified array\ninsomnia.environment.set(\"deckIds_kienboec\", JSON.stringify(selectedIds));\ninsomnia.environment.set(\"stack_kienboec\", JSON.stringify(cardIds));\n\n\n// Tests\ninsomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Cards array exists and has items', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    // Check that the Cards array exists and is an array\n    insomnia.expect(cards).to.be.an('array');\n    insomnia.expect(cards.length).to.be.greaterThan(0);\n});\n\ninsomnia.test('Each card has expected properties', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    cards.forEach((card) => {\n        // Check required properties\n        insomnia.expect(card).to.have.property('Id').that.is.a('string');\n        insomnia.expect(card).to.have.property('Name').that.is.a('string');\n        insomnia.expect(card).to.have.property('Damage').that.is.a('number');\n        insomnia.expect(card).to.have.property('ElementType').that.is.a('number');\n    });\n});\n\ninsomnia.test('Cards have valid values', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    cards.forEach((card) => {\n        // Validate damage values\n        insomnia.expect(card.Damage).to.be.at.least(0);\n\n        // Validate ElementType range (assuming valid range is 0-2)\n        insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n    });\n});\n\ninsomnia.test('Cards have unique IDs', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    const ids = cards.map((card) => card.Id);\n    const uniqueIds = new Set(ids);\n\n    // Ensure no duplicate IDs\n    insomnia.expect(ids.length).to.equal(uniqueIds.size);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_85a2d52fc65b4f75a224320ffe151a8b","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733586014271,"created":1733585549957,"url":"http://localhost:10001/cards","name":"show all acquired cards kienboec (without authentication)","description":"Generated from cURL: curl -i -X GET http://localhost:10001/cards --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_a2fac798d24f4b858f60e94c6b3457d5","name":"","value":"","description":"","disabled":false}],"authentication":{"type":"none"},"preRequestScript":"","metaSortKey":-1733583212046.5,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 401', () => {\n  insomnia.expect(insomnia.response.code).to.eql(401);\n});\n\ninsomnia.test('Reponse: \"User not authorized\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User not authorized\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d73094dfc9644a388ce379dbad6b1e89","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733825475732,"created":1733583213368,"url":"http://localhost:10001/cards","name":"show all acquired cards altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/cards --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212046,"isPrivate":false,"afterResponseScript":"// Parse the response\nlet response = insomnia.response.json();\n\n// Extract card IDs\nlet cardIds = response.Cards.map(card => card.Id);\n\n// Shuffle the array to get random IDs\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\nshuffle(cardIds);\n\n// Select the first 4 IDs\nlet selectedIds = cardIds.slice(0, 4);\n\n// Save the selected IDs as a stringified array\ninsomnia.environment.set(\"deckIds_altenhof\", JSON.stringify(selectedIds));\ninsomnia.environment.set(\"stack_altenhof\", JSON.stringify(cardIds));\n\n\n\n\n\n// Tests\ninsomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Cards array exists and has items', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    // Check that the Cards array exists and is an array\n    insomnia.expect(cards).to.be.an('array');\n    insomnia.expect(cards.length).to.be.greaterThan(0);\n});\n\ninsomnia.test('Each card has expected properties', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    cards.forEach((card) => {\n        // Check required properties\n        insomnia.expect(card).to.have.property('Id').that.is.a('string');\n        insomnia.expect(card).to.have.property('Name').that.is.a('string');\n        insomnia.expect(card).to.have.property('Damage').that.is.a('number');\n insomnia.expect(card).to.have.property('ElementType').that.is.a('number');\n    });\n});\n\ninsomnia.test('Cards have valid values', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    cards.forEach((card) => {\n        // Validate damage values\n        insomnia.expect(card.Damage).to.be.at.least(0);\n\n        // Validate ElementType range (assuming valid range is 0-2)\n        insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n    });\n});\n\ninsomnia.test('Cards have unique IDs', () => {\n    const jsonResponse = insomnia.response.json();\n    const cards = jsonResponse.Cards;\n\n    const ids = cards.map((card) => card.Id);\n    const uniqueIds = new Set(ids);\n\n    // Ensure no duplicate IDs\n    insomnia.expect(ids.length).to.equal(uniqueIds.size);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8c4831f4e6994349ae2e9d84a821c7c0","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733586136143,"created":1733583213368,"url":"http://localhost:10001/deck","name":"Show deck kienboec","description":"Generated from cURL: curl -i -X GET http://localhost:10001/deck --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212045,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an empty array', () => {\n    const jsonResponse = insomnia.response.json();\n\n    // Check that the response is an array\n    insomnia.expect(jsonResponse).to.be.an('array');\n\n    // Check that the array is empty\n    insomnia.expect(jsonResponse.length).to.equal(0);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8390e4fb952f4cf2b2fbd63fc821a96f","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733586144988,"created":1733583213369,"url":"http://localhost:10001/deck","name":"Show deck altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/deck --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212044,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an empty array', () => {\n    const jsonResponse = insomnia.response.json();\n\n    // Check that the response is an array\n    insomnia.expect(jsonResponse).to.be.an('array');\n\n    // Check that the array is empty\n    insomnia.expect(jsonResponse.length).to.equal(0);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_877f7cc580e7454d8ea3d55e80c109a8","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734701004286,"created":1733583213370,"url":"http://localhost:10001/deck","name":"Configure deck kienboec","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/deck --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"[\\\"845f0dc7-37d0-426e-994e-43fc3ac83c08\\\", \\\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\\\", \\\"e85e3976-7c86-4d06-9a80-641c2019a79f\\\", \\\"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\\\"]\"","method":"PUT","body":{"mimeType":"application/json","text":"{{deckIds_kienboec}}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212043,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse: \"Deck updated\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Deck updated');\n});\n\ninsomnia.test('Validate Username in response', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Username).to.eql('kienboec');\n});\n\ninsomnia.test('Check if Deck array exists and has cards', () => {\n  const jsonBody = insomnia.response.json();\n  \n  // Check that the Deck property exists and is an array\n  insomnia.expect(jsonBody).to.have.property('Deck');\n  insomnia.expect(jsonBody.Deck).to.be.an('array');\n\n  // Check that the Deck array is not empty\n  insomnia.expect(jsonBody.Deck.length).to.be.above(0);\n});\n\ninsomnia.test('Validate structure of each card in the Deck', () => {\n  const deck = insomnia.response.json().Deck;\n  deck.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate ElementType logic for cards in the Deck', () => {\n  const deck = insomnia.response.json().Deck;\n\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0\n  };\n\n  deck.forEach(card => {\n    if (card.Name.includes('Water')) {\n      insomnia.expect(card.ElementType).to.eql(elementTypeMap.Water);\n    } else if (card.Name.includes('Fire')) {\n      insomnia.expect(card.ElementType).to.eql(elementTypeMap.Fire);\n    }\n  });\n});\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_34070de93caf4af4b89783e1ef2b58d6","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733825247095,"created":1733583213371,"url":"http://localhost:10001/deck","name":"Show deck kienboec","description":"Generated from cURL: curl -i -X GET http://localhost:10001/deck --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212042,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.be.an('array');\n});\n\ninsomnia.test('Array is not empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.length).to.be.greaterThan(0);\n});\n\ninsomnia.test('Each card has required properties', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        insomnia.expect(card).to.have.property('Id').that.is.a('string');\n        insomnia.expect(card).to.have.property('Name').that.is.a('string');\n        insomnia.expect(card).to.have.property('Damage').that.is.a('number');\n\t\t\tinsomnia.expect(card).to.have.property('ElementType').that.is.a('number');\n    });\n});\n\ninsomnia.test('Damage and ElementType values are valid', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        // Validate damage is non-negative\n        insomnia.expect(card.Damage).to.be.at.least(0);\n\n        // Validate ElementType within range\n        insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n    });\n});\n\ninsomnia.test('Cards have unique IDs', () => {\n    const jsonResponse = insomnia.response.json();\n\n    const ids = jsonResponse.map((card) => card.Id);\n    const uniqueIds = new Set(ids);\n\n    insomnia.expect(ids.length).to.equal(uniqueIds.size);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ab1bc9fb7721421ebc52935ea612e188","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734701009262,"created":1733583213371,"url":"http://localhost:10001/deck","name":"Configure deck altenhof","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/deck --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"[\\\"aa9999a0-734c-49c6-8f4a-651864b14e62\\\", \\\"d6e9c720-9b5a-40c7-a6b2-bc34752e3463\\\", \\\"d60e23cf-2238-4d49-844f-c7589ee5342e\\\", \\\"02a9c76e-b17d-427f-9240-2dd49b0d3bfd\\\"]\"","method":"PUT","body":{"mimeType":"application/json","text":"{{deckIds_altenhof}}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212041,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse: \"Deck updated\"', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Deck updated');\n});\n\ninsomnia.test('Validate Username in response', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Username).to.eql('altenhof');\n});\n\ninsomnia.test('Check if Deck array exists and has cards', () => {\n  const jsonBody = insomnia.response.json();\n  \n  // Check that the Deck property exists and is an array\n  insomnia.expect(jsonBody).to.have.property('Deck');\n  insomnia.expect(jsonBody.Deck).to.be.an('array');\n\n  // Check that the Deck array is not empty\n  insomnia.expect(jsonBody.Deck.length).to.be.above(0);\n});\n\ninsomnia.test('Validate structure of each card in the Deck', () => {\n  const deck = insomnia.response.json().Deck;\n  deck.forEach(card => {\n    insomnia.expect(card).to.have.all.keys('Id', 'Name', 'Damage', 'ElementType');\n    insomnia.expect(card.Id).to.be.a('string');\n    insomnia.expect(card.Name).to.be.a('string');\n    insomnia.expect(card.Damage).to.be.a('number');\n    insomnia.expect(card.ElementType).to.be.a('number');\n  });\n});\n\ninsomnia.test('Validate ElementType logic for cards in the Deck', () => {\n  const deck = insomnia.response.json().Deck;\n\n  const elementTypeMap = {\n    Water: 1,\n    Fire: 0\n  };\n\n  deck.forEach(card => {\n    if (card.Name.includes('Water')) {\n      insomnia.expect(card.ElementType).to.eql(elementTypeMap.Water);\n    } else if (card.Name.includes('Fire')) {\n      insomnia.expect(card.ElementType).to.eql(elementTypeMap.Fire);\n    }\n  });\n});\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b6f1a11e7a094be68120866c947c74a1","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733825257987,"created":1733583213372,"url":"http://localhost:10001/deck","name":"Show deck altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/deck --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212040,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.be.an('array');\n});\n\ninsomnia.test('Array is not empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.length).to.be.greaterThan(0);\n});\n\ninsomnia.test('Each card has required properties', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        insomnia.expect(card).to.have.property('Id').that.is.a('string');\n        insomnia.expect(card).to.have.property('Name').that.is.a('string');\n        insomnia.expect(card).to.have.property('Damage').that.is.a('number');\n\t\t\tinsomnia.expect(card).to.have.property('ElementType').that.is.a('number');\n    });\n});\n\ninsomnia.test('Damage and ElementType values are valid', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        // Validate damage is non-negative\n        insomnia.expect(card.Damage).to.be.at.least(0);\n\n        // Validate ElementType within range\n        insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n    });\n});\n\ninsomnia.test('Cards have unique IDs', () => {\n    const jsonResponse = insomnia.response.json();\n\n    const ids = jsonResponse.map((card) => card.Id);\n    const uniqueIds = new Set(ids);\n\n    insomnia.expect(ids.length).to.equal(uniqueIds.size);\n});\n\n\n// Store response\ninsomnia.environment.set(\"deck_altenhof\", JSON.stringify(insomnia.response.json()));\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b77147aa90d34e8d8aee9c4ac39ed6e3","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733586581005,"created":1733583213373,"url":"http://localhost:10001/deck","name":"Configure deck altenhof (with cards that belong to kienboec)","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/deck --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"[\\\"845f0dc7-37d0-426e-994e-43fc3ac83c08\\\", \\\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\\\", \\\"e85e3976-7c86-4d06-9a80-641c2019a79f\\\", \\\"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\\\"]\"\"","method":"PUT","body":{"mimeType":"application/json","text":"{{deckIds_kienboec}}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212039,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 400', () => {\n  insomnia.expect(insomnia.response.code).to.eql(400);\n});\n\ninsomnia.test('Reponse: \"Invalid deck configuration provided\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Invalid deck configuration provided\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3436b0d424c34a81b88dc791f5730676","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733588044576,"created":1733583213374,"url":"http://localhost:10001/deck","name":"Show deck altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/deck --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212038,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\n\ninsomnia.test('Response matches the first response before attempting misconfiguration of deck', () => {\n    const secondResponse = insomnia.response.json();\n\t\tconst firstReponse = JSON.parse(insomnia.environment.get(\"deck_altenhof\"));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    // Compare the responses\n    insomnia.expect(secondResponse).to.deep.equal(firstReponse);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_82783522740344fc899b990ccbc4f4af","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733586586353,"created":1733583213374,"url":"http://localhost:10001/deck","name":"Configure deck with (with only 3 cards)","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/deck --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"[\\\"aa9999a0-734c-49c6-8f4a-651864b14e62\\\", \\\"d6e9c720-9b5a-40c7-a6b2-bc34752e3463\\\", \\\"d60e23cf-2238-4d49-844f-c7589ee5342e\\\"]\"","method":"PUT","body":{"mimeType":"application/json","text":"[\"aa9999a0-734c-49c6-8f4a-651864b14e62\", \"d6e9c720-9b5a-40c7-a6b2-bc34752e3463\", \"d60e23cf-2238-4d49-844f-c7589ee5342e\"]"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212037,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 400', () => {\n  insomnia.expect(insomnia.response.code).to.eql(400);\n});\n\ninsomnia.test('Reponse: \"Invalid deck configuration provided\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Invalid deck configuration provided\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a31a5745eace400db60f0c27a2d4e157","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733826063873,"created":1733583213375,"url":"http://localhost:10001/deck","name":"Show deck kienboec","description":"Generated from cURL: curl -i -X GET http://localhost:10001/deck --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212036,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.be.an('array');\n});\n\ninsomnia.test('Array is not empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.length).to.be.greaterThan(0);\n});\n\ninsomnia.test('Each card has required properties', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        insomnia.expect(card).to.have.property('Id').that.is.a('string');\n        insomnia.expect(card).to.have.property('Name').that.is.a('string');\n        insomnia.expect(card).to.have.property('Damage').that.is.a('number');\n\t\t\tinsomnia.expect(card).to.have.property('ElementType').that.is.a('number');\n    });\n});\n\ninsomnia.test('Damage and ElementType values are valid', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        // Validate damage is non-negative\n        insomnia.expect(card.Damage).to.be.at.least(0);\n\n        // Validate ElementType within range\n        insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n    });\n});\n\ninsomnia.test('Cards have unique IDs', () => {\n    const jsonResponse = insomnia.response.json();\n\n    const ids = jsonResponse.map((card) => card.Id);\n    const uniqueIds = new Set(ids);\n\n    insomnia.expect(ids.length).to.equal(uniqueIds.size);\n});\n\n// Store response\ninsomnia.environment.set(\"deck_kienboec\", JSON.stringify(insomnia.response.json()));","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3f3d72cca0a7417583867ad5b9cf02e8","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733825269081,"created":1733583213376,"url":"http://localhost:10001/deck","name":"Show deck altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/deck --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212035,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.be.an('array');\n});\n\ninsomnia.test('Array is not empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.length).to.be.greaterThan(0);\n});\n\ninsomnia.test('Each card has required properties', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        insomnia.expect(card).to.have.property('Id').that.is.a('string');\n        insomnia.expect(card).to.have.property('Name').that.is.a('string');\n        insomnia.expect(card).to.have.property('Damage').that.is.a('number');\n\t\t\tinsomnia.expect(card).to.have.property('ElementType').that.is.a('number');\n    });\n});\n\ninsomnia.test('Damage and ElementType values are valid', () => {\n    const jsonResponse = insomnia.response.json();\n\n    jsonResponse.forEach((card) => {\n        // Validate damage is non-negative\n        insomnia.expect(card.Damage).to.be.at.least(0);\n\n        // Validate ElementType within range\n        insomnia.expect(card.ElementType).to.be.oneOf([0, 1, 2]);\n    });\n});\n\ninsomnia.test('Cards have unique IDs', () => {\n    const jsonResponse = insomnia.response.json();\n\n    const ids = jsonResponse.map((card) => card.Id);\n    const uniqueIds = new Set(ids);\n\n    insomnia.expect(ids.length).to.equal(uniqueIds.size);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9a2d779666764f19a533ba96e67a2bbf","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733587442187,"created":1733583213376,"url":"http://localhost:10001/deck","name":"Show deck in plaintext kienboec","description":"Generated from cURL: curl -i -X GET \"http://localhost:10001/deck?format=plain\" --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[{"name":"format","value":"plain","disabled":false}],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212034,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is plaintext and not empty', () => {\n    const responseBody = insomnia.response.body;\n\n    insomnia.expect(responseBody).to.be.a('string'); // Check if response is a string\n\t\tinsomnia.expect(responseBody.trim()).to.not.equal('');\n});\n\ninsomnia.test('Response matches expected format', () => {\n    const responseBody = insomnia.response.body;\n\n    // Regular expression to match each card's structure\n    const cardRegex = /^ID: [\\w-]+, Name: \\w+, Damage: \\d+, Card Type: \\w+ Card, Element Type: \\w+$/;\n\n    // Split response into lines and validate each line\n    const lines = responseBody.trim().split('\\n');\n    lines.forEach((line) => {\n        insomnia.expect(line).to.match(cardRegex);\n    });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_37bbf69981c846fa8167ab8ff28322cb","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733587452380,"created":1733583213377,"url":"http://localhost:10001/deck","name":"Show deck in plaintext altenhof","description":"Generated from cURL: curl -i -X GET \"http://localhost:10001/deck?format=plain\" --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[{"name":"format","value":"plain","disabled":false}],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212033,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is plaintext and not empty', () => {\n    const responseBody = insomnia.response.body;\n\n    insomnia.expect(responseBody).to.be.a('string'); // Check if response is a string\n\t\tinsomnia.expect(responseBody.trim()).to.not.equal('');\n});\n\ninsomnia.test('Response matches expected format', () => {\n    const responseBody = insomnia.response.body;\n\n    // Regular expression to match each card's structure\n    const cardRegex = /^ID: [\\w-]+, Name: \\w+, Damage: \\d+, Card Type: \\w+ Card, Element Type: \\w+$/;\n\n    // Split response into lines and validate each line\n    const lines = responseBody.trim().split('\\n');\n    lines.forEach((line) => {\n        insomnia.expect(line).to.match(cardRegex);\n    });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d5523c35c5e948538222c629c4d77828","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733587465056,"created":1733583213378,"url":"http://localhost:10001/users/kienboec","name":"Display user data kienboec","description":"Generated from cURL: curl -i -X GET http://localhost:10001/users/kienboec --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212032,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response contains required fields', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.have.property('Username').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('DisplayName').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Biography').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Image').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Stats').that.is.an('object');\n});\n\ninsomnia.test('Stats contain required fields and valid values', () => {\n    const jsonResponse = insomnia.response.json();\n    const stats = jsonResponse.Stats;\n\n    insomnia.expect(stats).to.have.property('Wins').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Losses').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Ties').that.is.a('number');\n    insomnia.expect(stats).to.have.property('EloPoints').that.is.a('number');\n\n    // Ensure stats are non-negative\n    insomnia.expect(stats.Wins).to.be.at.least(0);\n    insomnia.expect(stats.Losses).to.be.at.least(0);\n    insomnia.expect(stats.Ties).to.be.at.least(0);\n});\n\ninsomnia.test('Username is correct and non-empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.Username).to.equal('kienboec');\n    insomnia.expect(jsonResponse.Username.trim()).to.not.equal('');\n});\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_17f01b80e4ff4abc93b3da9fa6a6d627","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733587471214,"created":1733583213379,"url":"http://localhost:10001/users/altenhof","name":"Display user data altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/users/altenhof --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212031,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response contains required fields', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.have.property('Username').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('DisplayName').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Biography').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Image').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Stats').that.is.an('object');\n});\n\ninsomnia.test('Stats contain required fields and valid values', () => {\n    const jsonResponse = insomnia.response.json();\n    const stats = jsonResponse.Stats;\n\n    insomnia.expect(stats).to.have.property('Wins').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Losses').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Ties').that.is.a('number');\n    insomnia.expect(stats).to.have.property('EloPoints').that.is.a('number');\n\n    // Ensure stats are non-negative\n    insomnia.expect(stats.Wins).to.be.at.least(0);\n    insomnia.expect(stats.Losses).to.be.at.least(0);\n    insomnia.expect(stats.Ties).to.be.at.least(0);\n});\n\ninsomnia.test('Username is correct and non-empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.Username).to.equal('altenhof');\n    insomnia.expect(jsonResponse.Username.trim()).to.not.equal('');\n});\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e441133b7e414200b15832618aa41f92","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734682015849,"created":1733583213379,"url":"http://localhost:10001/users/kienboec","name":"Update user kienboec","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/users/kienboec --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"{\\\"Name\\\": \\\"Kienboeck\\\",  \\\"Bio\\\": \\\"me playin...\\\", \\\"Image\\\": \\\":-)\\\"}\"","method":"PUT","body":{"mimeType":"application/json","text":"{\"Name\": \"Kienboeck\",  \"Bio\": \"me playin...\", \"Image\": \":-)\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212030,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse: \"User information updated', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('User information updated');\n});\n\ninsomnia.test('User object exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('User');\n});\n\ninsomnia.test('User properties have correct values', () => {\n  const user = insomnia.response.json().User;\n  insomnia.expect(user).to.have.property('Username', 'kienboec');\n  insomnia.expect(user).to.have.property('DisplayName', 'Kienboeck');\n  insomnia.expect(user).to.have.property('Biography', 'me playin...');\n  insomnia.expect(user).to.have.property('Image', ':-)');\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_271929b235ef4afd82d2f2e88a638342","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734682047015,"created":1733583213380,"url":"http://localhost:10001/users/altenhof","name":"Update user altenhof","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/users/altenhof --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"{\\\"Name\\\": \\\"Altenhofer\\\", \\\"Bio\\\": \\\"me codin...\\\",  \\\"Image\\\": \\\":-D\\\"}\"","method":"PUT","body":{"mimeType":"application/json","text":"{\"Name\": \"Altenhofer\", \"Bio\": \"me codin...\",  \"Image\": \":-D\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212029,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse: \"User information updated', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('User information updated');\n});\n\ninsomnia.test('User object exists', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.have.property('User');\n});\n\ninsomnia.test('User properties have correct values', () => {\n  const user = insomnia.response.json().User;\n  insomnia.expect(user).to.have.property('Username', 'altenhof');\n  insomnia.expect(user).to.have.property('DisplayName', 'Altenhofer');\n  insomnia.expect(user).to.have.property('Biography', 'me codin...');\n  insomnia.expect(user).to.have.property('Image', ':-D');\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_16725293e8de45e78e156ce6dc2d61d2","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733587480189,"created":1733583213381,"url":"http://localhost:10001/users/kienboec","name":"Display user data kienboec","description":"Generated from cURL: curl -i -X GET http://localhost:10001/users/kienboec --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212028,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response contains required fields', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.have.property('Username').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('DisplayName').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Biography').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Image').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Stats').that.is.an('object');\n});\n\ninsomnia.test('Stats contain required fields and valid values', () => {\n    const jsonResponse = insomnia.response.json();\n    const stats = jsonResponse.Stats;\n\n    insomnia.expect(stats).to.have.property('Wins').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Losses').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Ties').that.is.a('number');\n    insomnia.expect(stats).to.have.property('EloPoints').that.is.a('number');\n\n    // Ensure stats are non-negative\n    insomnia.expect(stats.Wins).to.be.at.least(0);\n    insomnia.expect(stats.Losses).to.be.at.least(0);\n    insomnia.expect(stats.Ties).to.be.at.least(0);\n});\n\ninsomnia.test('Username is correct and non-empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.Username).to.equal('kienboec');\n    insomnia.expect(jsonResponse.Username.trim()).to.not.equal('');\n});\n\ninsomnia.test('Response includes updated fields', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.DisplayName).to.equal('Kienboeck');\n    insomnia.expect(jsonResponse.Biography).to.equal('me playin...');\n    insomnia.expect(jsonResponse.Image).to.equal(':-)');\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_13a0535b42214683bdb30ff7f7257308","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733588096307,"created":1733583213381,"url":"http://localhost:10001/users/altenhof","name":"Display user data altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/users/altenhof --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212027,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response contains required fields', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse).to.have.property('Username').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('DisplayName').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Biography').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Image').that.is.a('string');\n    insomnia.expect(jsonResponse).to.have.property('Stats').that.is.an('object');\n});\n\ninsomnia.test('Stats contain required fields and valid values', () => {\n    const jsonResponse = insomnia.response.json();\n    const stats = jsonResponse.Stats;\n\n    insomnia.expect(stats).to.have.property('Wins').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Losses').that.is.a('number');\n    insomnia.expect(stats).to.have.property('Ties').that.is.a('number');\n    insomnia.expect(stats).to.have.property('EloPoints').that.is.a('number');\n\n    // Ensure stats are non-negative\n    insomnia.expect(stats.Wins).to.be.at.least(0);\n    insomnia.expect(stats.Losses).to.be.at.least(0);\n    insomnia.expect(stats.Ties).to.be.at.least(0);\n});\n\ninsomnia.test('Username is correct and non-empty', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.Username).to.equal('altenhof');\n    insomnia.expect(jsonResponse.Username.trim()).to.not.equal('');\n});\n\ninsomnia.test('Response includes updated fields', () => {\n    const jsonResponse = insomnia.response.json();\n\n    insomnia.expect(jsonResponse.DisplayName).to.equal('Altenhofer');\n    insomnia.expect(jsonResponse.Biography).to.equal('me codin...');\n    insomnia.expect(jsonResponse.Image).to.equal(':-D');\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1c695ac336994dd69c0b3e7ab54a1887","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733844252142,"created":1733583213382,"url":"http://localhost:10001/users/altenhof","name":"Display user data altenhof (as kienboec)","description":"Generated from cURL: curl -i -X GET http://localhost:10001/users/altenhof --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212026,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 403', () => {\n  insomnia.expect(insomnia.response.code).to.eql(403);\n});\n\ninsomnia.test('Reponse: \"User not authorized\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User not authorized\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_adb2c120087243d8bf1f1782a948fd9f","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733844257564,"created":1733583213383,"url":"http://localhost:10001/users/kienboec","name":"Display user data kienboec (as altenhof)","description":"Generated from cURL: curl -i -X GET http://localhost:10001/users/kienboec --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212025,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 403', () => {\n  insomnia.expect(insomnia.response.code).to.eql(403);\n});\n\ninsomnia.test('Reponse: \"User not authorized\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User not authorized\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_46607f2c57f84027b66dee8cfe2611da","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733844263553,"created":1733583213383,"url":"http://localhost:10001/users/kienboec","name":"Update user data kienboec (as altenhof)","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/users/kienboec --header \"Content-Type: application/json\" --header \"Authorization: Bearer altenhof-mtcgToken\" -d \"{\\\"Name\\\": \\\"Hoax\\\",  \\\"Bio\\\": \\\"me playin...\\\", \\\"Image\\\": \\\":-)\\\"}\"","method":"PUT","body":{"mimeType":"application/json","text":"{\"Name\": \"Hoax\",  \"Bio\": \"me playin...\", \"Image\": \":-)\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212024,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 403', () => {\n  insomnia.expect(insomnia.response.code).to.eql(403);\n});\n\ninsomnia.test('Reponse: \"User not authorized\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User not authorized\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_da3bc6c0f3a741d3b11a253689ce5c84","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733844268409,"created":1733583213384,"url":"http://localhost:10001/users/altenhof","name":"Update user data altenhof (as kienboec)","description":"Generated from cURL: curl -i -X PUT http://localhost:10001/users/altenhof --header \"Content-Type: application/json\" --header \"Authorization: Bearer kienboec-mtcgToken\" -d \"{\\\"Name\\\": \\\"Hoax\\\", \\\"Bio\\\": \\\"me codin...\\\",  \\\"Image\\\": \\\":-D\\\"}\"","method":"PUT","body":{"mimeType":"application/json","text":"{\"Name\": \"Hoax\", \"Bio\": \"me codin...\",  \"Image\": \":-D\"}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212023,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 403', () => {\n  insomnia.expect(insomnia.response.code).to.eql(403);\n});\n\ninsomnia.test('Reponse: \"User not authorized\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User not authorized\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_97353f701f0b4062a5d63e3acfdf12d6","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733587962596,"created":1733583213385,"url":"http://localhost:10001/users/someGuy","name":"Display user data someGuy (as kienboec)","description":"Generated from cURL: curl -i -X GET http://localhost:10001/users/someGuy  --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212022,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 404', () => {\n  insomnia.expect(insomnia.response.code).to.eql(404);\n});\n\ninsomnia.test('Reponse: \"User doesnt exist\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"User doesn't exist\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_058ffae6815d46f389a3b565f17a8a44","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733590131001,"created":1733583213386,"url":"http://localhost:10001/stats","name":"Display stats kienboec","description":"Generated from cURL: curl -i -X GET http://localhost:10001/stats --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212021,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test(\"Response has all required keys\", () => {\n    insomnia.expect(insomnia.response.json()).to.have.keys([\"Wins\", \"Losses\", \"Ties\", \"EloPoints\"]);\n});\n\ninsomnia.test(\"Wins, Losses, and Ties are zero\", () => {\n    insomnia.expect(insomnia.response.json().Wins).to.equal(0);\n    insomnia.expect(insomnia.response.json().Losses).to.equal(0);\n    insomnia.expect(insomnia.response.json().Ties).to.equal(0);\n});\n\ninsomnia.test(\"EloPoints is 100\", () => {\n    insomnia.expect(insomnia.response.json().EloPoints).to.equal(100);\n});\n\ninsomnia.test(\"Data types are correct\", () => {\n    insomnia.expect(insomnia.response.json().Wins).to.be.a(\"number\");\n    insomnia.expect(insomnia.response.json().Losses).to.be.a(\"number\");\n    insomnia.expect(insomnia.response.json().Ties).to.be.a(\"number\");\n    insomnia.expect(insomnia.response.json().EloPoints).to.be.a(\"number\");\n});\n\n// Store response\ninsomnia.environment.set(\"stats_kienboec\", JSON.stringify(insomnia.response.json()));\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9df58bf2b44e4836a4dcb555cb931cb0","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733590139261,"created":1733583213386,"url":"http://localhost:10001/stats","name":"Display stats altenhof","description":"Generated from cURL: curl -i -X GET http://localhost:10001/stats --header \"Authorization: Bearer altenhof-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"altenhof-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212020,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test(\"Response has all required keys\", () => {\n    insomnia.expect(insomnia.response.json()).to.have.keys([\"Wins\", \"Losses\", \"Ties\", \"EloPoints\"]);\n});\n\ninsomnia.test(\"Wins, Losses, and Ties are zero\", () => {\n    insomnia.expect(insomnia.response.json().Wins).to.equal(0);\n    insomnia.expect(insomnia.response.json().Losses).to.equal(0);\n    insomnia.expect(insomnia.response.json().Ties).to.equal(0);\n});\n\ninsomnia.test(\"EloPoints is 100\", () => {\n    insomnia.expect(insomnia.response.json().EloPoints).to.equal(100);\n});\n\ninsomnia.test(\"Data types are correct\", () => {\n    insomnia.expect(insomnia.response.json().Wins).to.be.a(\"number\");\n    insomnia.expect(insomnia.response.json().Losses).to.be.a(\"number\");\n    insomnia.expect(insomnia.response.json().Ties).to.be.a(\"number\");\n    insomnia.expect(insomnia.response.json().EloPoints).to.be.a(\"number\");\n});\n\n// Store response\ninsomnia.environment.set(\"stats_altenhof\", JSON.stringify(insomnia.response.json()));\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9f6c9ec5273047e2a5a483cc6aed1b9e","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733588604089,"created":1733583213387,"url":"http://localhost:10001/scoreboard","name":"Display scoreboard (as kienboec)","description":"Generated from cURL: curl -i -X GET http://localhost:10001/scoreboard --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212019,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has the required keys', () => {\n  const responseBody = insomnia.response.json();\n  responseBody.forEach(item => {\n    insomnia.expect(item).to.have.all.keys([\n      'Username',\n      'ChosenName',\n      'Wins',\n      'Losses',\n      'Ties',\n      'EloPoints'\n    ]);\n  });\n});\n\ninsomnia.test('Each object has correct data types', () => {\n  const responseBody = insomnia.response.json();\n  responseBody.forEach(item => {\n    insomnia.expect(item.Username).to.be.a('string');\n    insomnia.expect(item.ChosenName).to.be.a('string');\n    insomnia.expect(item.Wins).to.be.a('number');\n    insomnia.expect(item.Losses).to.be.a('number');\n    insomnia.expect(item.Ties).to.be.a('number');\n    insomnia.expect(item.EloPoints).to.be.a('number');\n  });\n});\n\ninsomnia.test('Wins, Losses, and Ties are non-negative', () => {\n  const responseBody = insomnia.response.json();\n  responseBody.forEach(item => {\n    insomnia.expect(item.Wins).to.be.at.least(0);\n    insomnia.expect(item.Losses).to.be.at.least(0);\n    insomnia.expect(item.Ties).to.be.at.least(0);\n  });\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9dcd1d08c3ef4231a3450dd093c95b2c","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734876880231,"created":1733583213388,"url":"http://localhost:10001/battles","name":"Start battle (as kienboec)","description":"Generated from cURL: curl -i -X POST http://localhost:10001/battles --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583212018,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody).to.be.an('array');\n});\n\ninsomnia.test('Response contains battle rounds and result', () => {\n  const responseBody = insomnia.response.json();\n  \n  // Check that there is at least one round\n  const hasRounds = responseBody.some(line => line.startsWith('>>> Round '));\n  insomnia.expect(hasRounds).to.eql(true);\n\n  // Check that it ends with a result\n  const lastLine = responseBody[responseBody.length - 2];\n  insomnia.expect(lastLine).to.include('>>> Result <<<');\n});\n\ninsomnia.test('Each round log follows expected patterns', () => {\n  const responseBody = insomnia.response.json();\n  \n  // Filter lines for rounds\n  const roundLines = responseBody.filter(line => line.startsWith('>>> Round '));\n  roundLines.forEach(line => {\n    insomnia.expect(line).to.match(/^>>> Round \\d+ <<<$/);\n  });\n  \n  // Validate card play logs\n  const playLines = responseBody.filter(line => line.includes('plays Card'));\n  playLines.forEach(line => {\n    insomnia.expect(line).to.match(/^\\w+ plays Card \\w+!$/);\n  });\n\n  // Validate card details\n  const cardDetails = responseBody.filter(line => line.startsWith('Card Type:'));\n  cardDetails.forEach(line => {\n    insomnia.expect(line).to.match(/^Card Type: (Monster|Spell) \\| Damage: \\d+(\\.\\d+)? \\| Element Type: \\w+$/);\n  });\n\n  // Validate outcomes (win or tie)\n  const outcomes = responseBody.filter(line => line.includes('has won Round') || line.includes(\"it's a tie\"));\n  outcomes.forEach(line => {\n    insomnia.expect(line).to.match(/^(\\w+ has won Round \\d+!|No one has won Round \\d+ - it's a tie!)$/);\n  });\n});\n\n\ninsomnia.test('Final result is well-formatted', () => {\n  const responseBody = insomnia.response.json();\n  const lastLine = responseBody[responseBody.length - 1];\n  \n  // Validate the result format for either winning or a tie condition\n  insomnia.expect(lastLine).to.match(\n    /^(?:\\w+ defeated \\w+ in \\d+ rounds\\. Well done!|None of the players managed to win within 100 rounds\\. It's a tie!)$/\n  );\n});\n\ninsomnia.test('Battle log has events in correct order', () => {\n  const responseBody = insomnia.response.json();\n  \n  let currentRound = 0;\n  responseBody.forEach(line => {\n    if (line.startsWith('>>> Round ')) {\n      const roundNumber = parseInt(line.match(/\\d+/)[0], 10);\n      insomnia.expect(roundNumber).to.be.greaterThan(currentRound);\n      currentRound = roundNumber;\n    }\n  });\n});\n\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5065c4f941ef4442bd645eede07fd704","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733590326529,"created":1733589806704,"url":"http://localhost:10001/stats","name":"Display stats kienboec","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","token":"kienboec-mtcgToken"},"metaSortKey":-1733583211918,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response has all required keys', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody).to.have.all.keys('Wins', 'Losses', 'Ties', 'EloPoints');\n});\n\ninsomnia.test('Response keys have correct data types', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody.Wins).to.be.a('number');\n  insomnia.expect(responseBody.Losses).to.be.a('number');\n  insomnia.expect(responseBody.Ties).to.be.a('number');\n  insomnia.expect(responseBody.EloPoints).to.be.a('number');\n});\n\ninsomnia.test('Wins, Losses, and Ties are non-negative', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody.Wins).to.be.at.least(0);\n  insomnia.expect(responseBody.Losses).to.be.at.least(0);\n  insomnia.expect(responseBody.Ties).to.be.at.least(0);\n});\n\ninsomnia.test('Stats differ from pre-battle stats', () => {\n    const secondResponse = insomnia.response.json();\n\t\tconst firstReponse = JSON.parse(insomnia.environment.get(\"stats_kienboec\"));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    // Compare the responses\n    insomnia.expect(secondResponse).to.not.equal(firstReponse);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_506f0ed335f7457fa352ac51c5adcb50","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733590329678,"created":1733589863234,"url":"http://localhost:10001/stats","name":"Display stats altenhof","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{"type":"bearer","token":"altenhof-mtcgToken"},"metaSortKey":-1733583211818,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response has all required keys', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody).to.have.all.keys('Wins', 'Losses', 'Ties', 'EloPoints');\n});\n\ninsomnia.test('Response keys have correct data types', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody.Wins).to.be.a('number');\n  insomnia.expect(responseBody.Losses).to.be.a('number');\n  insomnia.expect(responseBody.Ties).to.be.a('number');\n  insomnia.expect(responseBody.EloPoints).to.be.a('number');\n});\n\ninsomnia.test('Wins, Losses, and Ties are non-negative', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody.Wins).to.be.at.least(0);\n  insomnia.expect(responseBody.Losses).to.be.at.least(0);\n  insomnia.expect(responseBody.Ties).to.be.at.least(0);\n});\n\ninsomnia.test('Stats differ from pre-battle stats', () => {\n    const secondResponse = insomnia.response.json();\n\t\tconst firstReponse = JSON.parse(insomnia.environment.get(\"stats_altenhof\"));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    // Compare the responses\n    insomnia.expect(secondResponse).to.not.equal(firstReponse);\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_04fd7562c990438cace084801be3ad17","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1733590271302,"created":1733589977103,"url":"http://localhost:10001/scoreboard","name":"Display scoreboard (as kienboec)","description":"Generated from cURL: curl -i -X GET http://localhost:10001/scoreboard --header \"Authorization: Bearer kienboec-mtcgToken\"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","disabled":false,"token":"kienboec-mtcgToken","prefix":""},"preRequestScript":"","metaSortKey":-1733583211718,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const responseBody = insomnia.response.json();\n  insomnia.expect(responseBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has the required keys', () => {\n  const responseBody = insomnia.response.json();\n  responseBody.forEach(item => {\n    insomnia.expect(item).to.have.all.keys([\n      'Username',\n      'ChosenName',\n      'Wins',\n      'Losses',\n      'Ties',\n      'EloPoints'\n    ]);\n  });\n});\n\ninsomnia.test('Each object has correct data types', () => {\n  const responseBody = insomnia.response.json();\n  responseBody.forEach(item => {\n    insomnia.expect(item.Username).to.be.a('string');\n    insomnia.expect(item.ChosenName).to.be.a('string');\n    insomnia.expect(item.Wins).to.be.a('number');\n    insomnia.expect(item.Losses).to.be.a('number');\n    insomnia.expect(item.Ties).to.be.a('number');\n    insomnia.expect(item.EloPoints).to.be.a('number');\n  });\n});\n\ninsomnia.test('Wins, Losses, and Ties are non-negative', () => {\n  const responseBody = insomnia.response.json();\n  responseBody.forEach(item => {\n    insomnia.expect(item.Wins).to.be.at.least(0);\n    insomnia.expect(item.Losses).to.be.at.least(0);\n    insomnia.expect(item.Ties).to.be.at.least(0);\n  });\n});\n\ninsomnia.test('Users are sorted by EloPoints in descending order', () => {\n  const responseBody = insomnia.response.json();\n\n  // Extract EloPoints from the response\n  const eloPoints = responseBody.map(user => user.EloPoints);\n\n  // Check if the array is sorted in descending order\n  for (let i = 0; i < eloPoints.length - 1; i++) {\n    insomnia.expect(eloPoints[i]).to.be.at.least(eloPoints[i + 1]);\n  }\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_df4e37d6976c49eba000e7e95dd26203","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868123169,"created":1733821613577,"url":"http://localhost:10001/tradings","name":"Display trading deals kienboec","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","token":"kienboec-mtcgToken"},"metaSortKey":-1733583211618,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7a7ce66bc52f4822bb718a0f36c3279a","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868318946,"created":1733821718334,"url":"http://localhost:10001/tradings","name":"Create trading deal kienboec","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\"CardToTrade\": \"{{ _.cardToTrade }}\", \"Type\": \"monster\", \"MinimumDamage\": 15}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{},"preRequestScript":"// Retrieve environment variables\nconst ids = JSON.parse(insomnia.environment.get(\"stack_kienboec\"));\nconst cards = JSON.parse(insomnia.environment.get(\"deck_kienboec\"));\n\n// Extract IDs from the cards array\nconst cardIds = cards.map(card => card.Id);\n\n// Find IDs that are in `ids` but not in `cardIds`\nconst missingIds = ids.filter(id => !cardIds.includes(id));\n\ninsomnia.environment.set(\"cardToTrade\", missingIds[0]);","metaSortKey":-1733583211518,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Response message is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Trade offer created');\n});\n\ninsomnia.test('Response username is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Username).to.eql('kienboec');\n});\n\ninsomnia.test('Card ID matches environment variable', () => {\n  const jsonBody = insomnia.response.json();\n  const cardToTrade = insomnia.environment.get('cardToTrade');\n  insomnia.expect(jsonBody.Card.Id).to.eql(cardToTrade);\n});\n\ninsomnia.test('Card object has all required fields', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Card).to.be.an('object');\n  insomnia.expect(jsonBody.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n});\n\ninsomnia.test('Card fields have correct types', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Card.Id).to.be.a('string');\n  insomnia.expect(jsonBody.Card.Name).to.be.a('string');\n  insomnia.expect(jsonBody.Card.Damage).to.be.a('number');\n  insomnia.expect(jsonBody.Card.Type).to.be.a('string');\n});\n\ninsomnia.test('RequestedType is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.RequestedType).to.eql('Monster');\n});\n\ninsomnia.test('RequestedDamage is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.RequestedDamage).to.eql(15);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_46499caa0a804eebbd0ba450dab753db","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868183980,"created":1733821746640,"url":"http://localhost:10001/tradings","name":"Display trading deals kienboec","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","token":"kienboec-mtcgToken"},"metaSortKey":-1733583211418,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fe0a3aaaaebb4ce0977ecb025bc7cbe0","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868186323,"created":1733821752823,"url":"http://localhost:10001/tradings","name":"Display trading deals altenhof","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken","id":"pair_2720b6e8a04343a7af44a215d9403b2d"}],"authentication":{"type":"bearer","token":"altenhof-mtcgToken"},"metaSortKey":-1733583211368,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d2b84412bae643cfb6300b8cc3d11368","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868419906,"created":1733821839766,"url":"http://localhost:10001/tradings/{{cardToTrade}}","name":"Delete trading deal kienboec","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{},"metaSortKey":-1733583211268,"isPrivate":false,"pathParameters":[],"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Reponse: \"Trade offer removed\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Trade offer removed\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9ed8efd367d74a2ca2de78534b1f4c24","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868188164,"created":1733821872682,"url":"http://localhost:10001/tradings","name":"Display trading deals kienboec","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","token":"kienboec-mtcgToken"},"metaSortKey":-1733583211168,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_0436c46a93494bba955bea5730b26909","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868324150,"created":1733821914121,"url":"http://localhost:10001/tradings","name":"Create trading deal kienboec","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\"CardToTrade\": \"{{ _.cardToTrade }}\", \"Type\": \"monster\", \"MinimumDamage\": 15}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","prefix":"","token":"kienboec-mtcgToken"},"preRequestScript":"// Retrieve environment variables\nconst ids = JSON.parse(insomnia.environment.get(\"stack_kienboec\"));\nconst cards = JSON.parse(insomnia.environment.get(\"deck_kienboec\"));\n\n// Extract IDs from the cards array\nconst cardIds = cards.map(card => card.Id);\n\n// Find IDs that are in `ids` but not in `cardIds`\nconst missingIds = ids.filter(id => !cardIds.includes(id));\n\ninsomnia.environment.set(\"cardToTrade\", missingIds[0]);","metaSortKey":-1733583211068,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Response message is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Trade offer created');\n});\n\ninsomnia.test('Response username is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Username).to.eql('kienboec');\n});\n\ninsomnia.test('Card ID matches environment variable', () => {\n  const jsonBody = insomnia.response.json();\n  const cardToTrade = insomnia.environment.get('cardToTrade');\n  insomnia.expect(jsonBody.Card.Id).to.eql(cardToTrade);\n});\n\ninsomnia.test('Card object has all required fields', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Card).to.be.an('object');\n  insomnia.expect(jsonBody.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n});\n\ninsomnia.test('Card fields have correct types', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Card.Id).to.be.a('string');\n  insomnia.expect(jsonBody.Card.Name).to.be.a('string');\n  insomnia.expect(jsonBody.Card.Damage).to.be.a('number');\n  insomnia.expect(jsonBody.Card.Type).to.be.a('string');\n});\n\ninsomnia.test('RequestedType is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.RequestedType).to.eql('Monster');\n});\n\ninsomnia.test('RequestedDamage is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.RequestedDamage).to.eql(15);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8676e8c3e9414b18b53a2b10260308c5","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868189993,"created":1733821954078,"url":"http://localhost:10001/tradings","name":"Display trading deals kienboec","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","token":"kienboec-mtcgToken"},"metaSortKey":-1733583210968,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_98d952113c77452e8da9d82042086b60","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868191019,"created":1733821959372,"url":"http://localhost:10001/tradings","name":"Display trading deals altenhof","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken","id":"pair_2720b6e8a04343a7af44a215d9403b2d"}],"authentication":{"type":"bearer","token":"altenhof-mtcgToken"},"metaSortKey":-1733583210868,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_0cae796711d74529ac21acfe4cf104f3","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868469341,"created":1733821984673,"url":"http://localhost:10001/tradings/6cd85277-4590-49d4-b0cf-ba0a921faad0","name":"Try to trade with yourself (kienboec) - Protocol not supported","description":"","method":"POST","body":{"text":"\"4ec8b269-0dfa-4f97-809a-2c63fe2a0025\"","mimeType":"application/json"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{},"metaSortKey":-1733583210768,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 400', () => {\n  insomnia.expect(insomnia.response.code).to.eql(400);\n});\n\ninsomnia.test('Reponse: \"Invalid request body\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Invalid request body\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d4e0680e8d6746c182cea2a7777dac34","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868475587,"created":1733822061021,"url":"http://localhost:10001/tradings/6cd85277-4590-49d4-b0cf-ba0a921faad0","name":"Trade with kienboec (as altenhof) - Protocol not supported","description":"","method":"POST","body":{"text":"\"951e886a-0fbf-425d-8df5-af2ee4830d85\"","mimeType":"application/json"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken"}],"authentication":{},"metaSortKey":-1733583210668,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 400', () => {\n  insomnia.expect(insomnia.response.code).to.eql(400);\n});\n\ninsomnia.test('Reponse: \"Invalid request body\"', () => {\n\tinsomnia.expect(insomnia.response.json()).to.equal(\"Invalid request body\");\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b939af8a28804132bf5f7a0ed4e3f9b2","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868355206,"created":1733831547066,"url":"http://localhost:10001/tradings","name":"Create trading deal altenhof","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\"CardToTrade\": \"{{ _.cardToTrade }}\", \"Type\": \"spell\", \"MinimumDamage\": 20}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_8cc44a4cdae84c3cb9677007ec579a2f"},{"name":"Authorization","value":"Bearer altenhof-mtcgToken","id":"pair_4ce7be1d0fa24b99b87a6aa580215361"}],"authentication":{"type":"bearer","prefix":"","token":"altenhof-mtcgToken"},"preRequestScript":"// Retrieve environment variables\nconst ids = JSON.parse(insomnia.environment.get(\"stack_altenhof\"));\nconst cards = JSON.parse(insomnia.environment.get(\"deck_altenhof\"));\n\n// Extract IDs from the cards array\nconst cardIds = cards.map(card => card.Id);\n\n// Find IDs that are in `ids` but not in `cardIds`\nconst missingIds = ids.filter(id => !cardIds.includes(id));\n\ninsomnia.environment.set(\"cardToTrade\", missingIds[0]);","metaSortKey":-1733583210618,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 201', () => {\n  insomnia.expect(insomnia.response.code).to.eql(201);\n});\n\ninsomnia.test('Response message is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.message).to.eql('Trade offer created');\n});\n\ninsomnia.test('Response username is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Username).to.eql('altenhof');\n});\n\ninsomnia.test('Card ID matches environment variable', () => {\n  const jsonBody = insomnia.response.json();\n  const cardToTrade = insomnia.environment.get('cardToTrade');\n  insomnia.expect(jsonBody.Card.Id).to.eql(cardToTrade);\n});\n\ninsomnia.test('Card object has all required fields', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Card).to.be.an('object');\n  insomnia.expect(jsonBody.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n});\n\ninsomnia.test('Card fields have correct types', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.Card.Id).to.be.a('string');\n  insomnia.expect(jsonBody.Card.Name).to.be.a('string');\n  insomnia.expect(jsonBody.Card.Damage).to.be.a('number');\n  insomnia.expect(jsonBody.Card.Type).to.be.a('string');\n});\n\ninsomnia.test('RequestedType is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.RequestedType).to.eql('Spell');\n});\n\ninsomnia.test('RequestedDamage is correct', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody.RequestedDamage).to.eql(20);\n});\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1f7b6f795b924331b72f048d55f09590","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868192442,"created":1733822099452,"url":"http://localhost:10001/tradings","name":"Display trading deals kienboec","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer kienboec-mtcgToken"}],"authentication":{"type":"bearer","token":"kienboec-mtcgToken"},"metaSortKey":-1733583210568,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_08d4b5202b10422c8bad8dadd56258cc","parentId":"fld_0223b907205c45c0be4c71b7bd725efd","modified":1734868193776,"created":1733822105614,"url":"http://localhost:10001/tradings","name":"Display trading deals altenhof","description":"","method":"GET","body":{},"parameters":[],"headers":[{"name":"Authorization","value":"Bearer altenhof-mtcgToken","id":"pair_2720b6e8a04343a7af44a215d9403b2d"}],"authentication":{"type":"bearer","token":"altenhof-mtcgToken"},"metaSortKey":-1733583210468,"isPrivate":false,"afterResponseScript":"insomnia.test('Status is 200', () => {\n  insomnia.expect(insomnia.response.code).to.eql(200);\n});\n\ninsomnia.test('Response is an array', () => {\n  const jsonBody = insomnia.response.json();\n  insomnia.expect(jsonBody).to.be.an('array');\n});\n\ninsomnia.test('Each object has required keys', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Object at index ${index} has required keys`, () => {\n      insomnia.expect(element).to.have.all.keys('Username', 'Card', 'RequestedType', 'RequestedDamage');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Username field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Username at index ${index} is a string`, () => {\n      insomnia.expect(element.Username).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid Card object', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card object at index ${index} has required keys`, () => {\n      insomnia.expect(element.Card).to.be.an('object');\n      insomnia.expect(element.Card).to.have.all.keys('Id', 'Name', 'Damage', 'Type');\n    });\n  });\n});\n\ninsomnia.test('Each Card object has valid field types', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`Card fields at index ${index} have correct types`, () => {\n      insomnia.expect(element.Card.Id).to.be.a('string');\n      insomnia.expect(element.Card.Name).to.be.a('string');\n      insomnia.expect(element.Card.Damage).to.be.a('number');\n      insomnia.expect(element.Card.Type).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedType field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedType at index ${index} is a string`, () => {\n      insomnia.expect(element.RequestedType).to.be.a('string');\n    });\n  });\n});\n\ninsomnia.test('Each object has a valid RequestedDamage field', () => {\n  const jsonBody = insomnia.response.json();\n  jsonBody.forEach((element, index) => {\n    insomnia.test(`RequestedDamage at index ${index} is a number`, () => {\n      insomnia.expect(element.RequestedDamage).to.be.a('number');\n    });\n  });\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_711dd1e66762d56c8035512808a75877c05c1558","parentId":"wrk_099f18546a14452c9a28c49ce68919f2","modified":1735565376144,"created":1733583215048,"name":"Base Environment","data":{"deckIds_kienboec":"[\"9e8238a4-8a7a-487f-9f7d-a8c97899eb48\",\"84d276ee-21ec-4171-a509-c1b88162831c\",\"4ec8b269-0dfa-4f97-809a-2c63fe2a0025\",\"ed1dc1bc-f0aa-4a0c-8d43-1402189b33c8\"]","deckIds_altenhof":"[\"ce6bcaee-47e1-4011-a49e-5a4d7d4245f3\",\"a1618f1e-4f4c-4e09-9647-87e16f1edd2d\",\"aa9999a0-734c-49c6-8f4a-651864b14e62\",\"1cb6ab86-bdb2-47e5-b6e4-68c5ab389334\"]","deck_altenhof":"[{\"Id\":\"02a9c76e-b17d-427f-9240-2dd49b0d3bfd\",\"Name\":\"RegularSpell\",\"Damage\":45,\"ElementType\":2},{\"Id\":\"67f9048f-99b8-4ae4-b866-d8008d00c53d\",\"Name\":\"WaterGoblin\",\"Damage\":10,\"ElementType\":1},{\"Id\":\"845f0dc7-37d0-426e-994e-43fc3ac83c08\",\"Name\":\"WaterGoblin\",\"Damage\":10,\"ElementType\":1},{\"Id\":\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\",\"Name\":\"Dragon\",\"Damage\":50,\"ElementType\":2}]","stats_kienboec":"{\"Wins\":0,\"Losses\":0,\"Ties\":0,\"EloPoints\":100}","stats_altenhof":"{\"Wins\":0,\"Losses\":0,\"Ties\":0,\"EloPoints\":100}","stack_kienboec":"[\"9e8238a4-8a7a-487f-9f7d-a8c97899eb48\",\"84d276ee-21ec-4171-a509-c1b88162831c\",\"4ec8b269-0dfa-4f97-809a-2c63fe2a0025\",\"ed1dc1bc-f0aa-4a0c-8d43-1402189b33c8\",\"b017ee50-1c14-44e2-bfd6-2c0c5653a37c\",\"65ff5f23-1e70-4b79-b3bd-f6eb679dd3b5\",\"d60e23cf-2238-4d49-844f-c7589ee5342e\",\"f8043c23-1534-4487-b66b-238e0c3c39b5\",\"f3fad0f2-a1af-45df-b80d-2e48825773d9\",\"644808c2-f87a-4600-b313-122b02322fd5\",\"88221cfe-1f84-41b9-8152-8e36c6a354de\",\"55ef46c4-016c-4168-bc43-6b9b1e86414f\",\"91a6471b-1426-43f6-ad65-6fc473e16f9f\",\"b2237eca-0271-43bd-87f6-b22f70d42ca4\",\"1d3f175b-c067-4359-989d-96562bfa382c\",\"171f6076-4eb5-4a7d-b3f2-2d650cc3d237\",\"d04b736a-e874-4137-b191-638e0ff3b4e7\",\"74635fae-8ad3-4295-9139-320ab89c2844\",\"fc305a7a-36f7-4d30-ad27-462ca0445649\"]","stack_altenhof":"[\"ce6bcaee-47e1-4011-a49e-5a4d7d4245f3\",\"a1618f1e-4f4c-4e09-9647-87e16f1edd2d\",\"aa9999a0-734c-49c6-8f4a-651864b14e62\",\"1cb6ab86-bdb2-47e5-b6e4-68c5ab389334\",\"845f0dc7-37d0-426e-994e-43fc3ac83c08\",\"d6e9c720-9b5a-40c7-a6b2-bc34752e3463\",\"2508bf5c-20d7-43b4-8c77-bc677decadef\",\"dcd93250-25a7-4dca-85da-cad2789f7198\",\"02a9c76e-b17d-427f-9240-2dd49b0d3bfd\",\"d7d0cb94-2cbf-4f97-8ccf-9933dc5354b8\",\"8c20639d-6400-4534-bd0f-ae563f11f57a\",\"70962948-2bf7-44a9-9ded-8c68eeac7793\",\"67f9048f-99b8-4ae4-b866-d8008d00c53d\",\"951e886a-0fbf-425d-8df5-af2ee4830d85\",\"a6fde738-c65a-4b10-b400-6fef0fdb28ba\",\"2c98cd06-518b-464c-b911-8d787216cddd\",\"44c82fbc-ef6d-44ab-8c7a-9fb19a0e7c6e\",\"dfdd758f-649c-40f9-ba3a-8657f4b3439f\",\"e85e3976-7c86-4d06-9a80-641c2019a79f\",\"99f8f8dc-e25e-4a95-aa2c-782823f36e2a\"]","deck_kienboec":"[{\"Id\":\"65ff5f23-1e70-4b79-b3bd-f6eb679dd3b5\",\"Name\":\"Dragon\",\"Damage\":50,\"ElementType\":2},{\"Id\":\"84d276ee-21ec-4171-a509-c1b88162831c\",\"Name\":\"RegularSpell\",\"Damage\":28,\"ElementType\":2},{\"Id\":\"d60e23cf-2238-4d49-844f-c7589ee5342e\",\"Name\":\"WaterSpell\",\"Damage\":22,\"ElementType\":1},{\"Id\":\"fc305a7a-36f7-4d30-ad27-462ca0445649\",\"Name\":\"Ork\",\"Damage\":40,\"ElementType\":2}]","cardToTrade":"74635fae-8ad3-4295-9139-320ab89c2844"},"dataPropertyOrder":{"&":["deckIds_kienboec","deckIds_altenhof","deck_altenhof","stats_kienboec","stats_altenhof","stack_kienboec","stack_altenhof","deck_kienboec","cardToTrade"]},"color":null,"isPrivate":false,"metaSortKey":1733583215048,"environmentType":"kv","_type":"environment"},{"_id":"jar_711dd1e66762d56c8035512808a75877c05c1558","parentId":"wrk_099f18546a14452c9a28c49ce68919f2","modified":1735565376141,"created":1733583215151,"name":"Default Jar","cookies":[],"_type":"cookie_jar"}]}